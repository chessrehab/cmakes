ASM COMPILE  nasm -f elf -g -F stabs filename.asm	compiling the asm source file
NASM COMPILE ld -o outputfile filename.o		linking the object file to output executable elf
NASM COMPILE ld -m elf_i386 -o outputfile filename.o	linking object file on 32 bit mode
NASM COMPILE nasm -f elf32 -g -F stabs filename.asm	compiling for 32 bit assembly
NASM COMPILE nasm -f -g -F stabs			-f (format of the file) -g (include debug info) -F (format of debug info stabs/dwarf)

OBJDUMP objdump -D executablefile			object dump in assembly of executablefile
OBJDUMP objdump -D executable | grep -A20 main		grep main function from dissasembled executable
OBJDUMP objdump --disassembler-options="intel"		intel syntax
OBJDUMP objdump -M intel				intel syntax

GDB gdb -q executablefile				quiet  mode
GDB break main						set the breakpoint to symbol <main>
GDB del break 1 (d br 1)				delete breakpoint
GDB info breakpoints (i br)				show active breakpoints
GDB info registers (i r)				show register values
GDB info var (i va)					info of data variables (symbols)
GDB x/xb &VAR						examine whats on the variable address
GDB run							run program
GDB cont						continue
GDB kill						kill debugged program
GDB quit						quit gdb
GDB set disassembly intel				set dissasembly mode
GDB list						list the source code
GDB list NR_LINE					list the source code from line NR_LINE
GDB disassemble _section				disasemble the named section
GDB i r eip						info register eip
GDB x/x $eip						eXamine contents(in heX) of memory stored in register eip
GDB x/t $reg						eXamine contents(in binary) on the address pointed to by register
GDB x/u $reg						eXamine contents(in unsigned int) on the address pointed to by register
GDB x/20xw ADDR						eXamine 20 words(4b) units of content (in heX) at address
GDB x/20xb ADDR						eXamine 20 bytes (in heX) at address
GDB x/20xg ADDR						eXamine 20 giants(8b) (in heX) at address
GDB x/20xh ADDR						eXamine 20 halfwords(2b) (in heX) at address
GDB x/i ADDR($reg)					eXamine instruction at address
GDB x/4i ADDR($reg)					eXamine 4 consecutive instructions at address
GDB print $reg-4					store address $reg-4 in $1
GDB nexti						next instruction exec
GDB x/cb ADDR						eXamine byte and display as char
GDB x/6cb ADDR						eXamine 6 chars starting at address
GDB x/s ADDR						eXamine a NUL terminated string starting at addr
GDB bt							backtrace the stack


NASM INSTR mov dest,source				copy value from source to destination
NASM INSTR mov dest,[source]				copy value pointed to by address source to dest
NASM INSTR mov [dest],source				copy source to memory address poinbted to by dest
NASM INSTR xchg dest,source				exchange values between source and destination
NASM INSTR inc dest					increment destination value by 1
NASM INSTR dec dest					decrement destination value by 1
NASM INSTR jmp	LABEL					jumps to label or address
NASM INSTR jnz LABEL					jump when zero flag is 0
NASM INSTR movsx dest, source				copy value with keeping the sign bit of destination (sign extend)
NASM INSTR movzx dest, source				copy value with replacing the rest of dest with zeros (zero extend)
NASM INSTR neg OPERAND					negate a operand(register,memory value)
NASM INSTR mul r/m8 (r/m16, r/m32)			unsigned multiply value stored in IMPLICIT al(ax,eax) by r/m8 (r16,r32), store result in ax(ax+dx,edx+eax) and CF(1) if carryover and then dx (edx)
NASM INSTR imul r/m8 (r/m16, r/m32)			signed multiply value stored in IMPLICIT al(ax,eax) by r/m8 (r16,r32), store result in ax(ax+dx,edx+eax) and CF(1) if carryover and then dx (edx)
NASM INSTR div r/m8 (r/m16, r/m32)			divide value stored in IMPLICIT al(ax, eax) by r/m8(r/m16,r/m32) store result in al(ax,eax) and remainder in ah (dx,edx)
NASM INSTR add r/m, value/r/m				add 1st operand to second and store result in 1st operand
NASM INSTR sub r/m, value				subtracts from first operand a value
NASM INSTR push r16-32/m16-32/v				push register or memory or value on the stack
NASM INSTR pop r/m					pops value from the stack to register/memory
NASM INSTR pushf					pushes the flags register on the stack
NASM INSTR popf						pops the flags register
NASM INSTR pushfd					pushes flags register on the stack
NASM INSTR popfd					pops the flags register
NASM INSTR pusha					push all 8 registers on the stack
NASM INSTR popa						pop all the 8 registers from the stack
NASM INSTR pushad					push all 8 registers on the stack
NASM INSTR popad					pop all 8 registers from the stack
NASM INSTR cmp DEST,SRC					compares two operands by substracting them
NASM INSTR and DEST,val					ands the destination=reg or memory, csnnot do 2 memories
NASM INSTR not DEST					nots the destination reg or mem
NASM INSTR or DEST,val					ors the destination with source
NASM INSTR xor DEST,val					xors the destination with val
NASM INSTR shr DEST,val					shifts right by val amount of bits
NASM INSTR shl DEST,val					shifts left by val amount of bits
NASM INSTR ja LABEL (jnbe)				jump if above to label (unsigned)
NASM INSTR jb LABEL (jnae)				jump if below to label (unsigned)
NASM INSTR jae LABEL (jnb)				jump above or equal to label (unsigned)
NASM INSTR jbe LABEL (jna)				jump bellow or equal to label (unsigned)
NASM INSTR je LABEL (jz)				jump if equal to label
NASM INSTR jne LABEL (jnz)				jump if not equal to label
NASM INSTR jg LABEL (jnle)				jump if greater to label (signed)
NASM INSTR jl LABEL (jnge)				jump if less to label (signed)
NASM INSTR jge LABEL (jnl)				jump if greater or equal to label (signed)
NASM INSTR jle LABEL (jng)				jump if less or equal to label (signed)
NASM INSTR jnc LABEL					jump if not CF
NASM INSTR jc LABEL					jump if CF to label
NASM INSTR ror DEST,val					rotate destination right
NASM INSTR rol DEST,val					rotate destination left by val
NASM INSTR rcr DEST,val					rotate destination right via the CF
NASM INSTR rcl DEST,val					rotate destination left via the CF by val
NASM INSTR test DEST,val				check one bit in dest via bit mask in val, ZF is set if bit is not set
NASM INSTR bt reg,bit_position				puts the bit from destination on bit_position to CF
NASM INSTR stc						set CF to 1
NASM INSTR clc						clear CF
NASM INSTR lea reg,[base+index *2,3,4,5,8,9+dispo]	load effective address to register based on eff. add. calculation with allowed values
NASM INSTR xlat						implicit takes the address of lookup table from ebp and offset from al and places the value from lkp back to al
NASM INSTR std						set direction flag to 1
NASM INSTR cld						clear DF to 0
NASM INSTR loop LABEL					decrease ecx and if its not zero jump to label
NASM INSTR stosb					store byte(from al) to address pointed to edi and increase(if DF=0) edi or decrease (if DF=1) edi by one byte
NASM INSTR rep stosb					store byte(from al) ECX number of times to address pointed to edi, while increasing (DF=0) or decreasing(DF=1) edi as well as decreasing ECX until ECX is 0
NASM INSTR movsb					store byte(from address pointed to by ESI) to address pointed to EDI and increase(if DF=0) EDI or decrease (if DF=1) EDI by one byte
NASM INSTR rep movsb					store byte(from address pointed to by ESI) ECX number of times to address pointed to EDI, while increasing (DF=0) or decreasing(DF=1) EDI as well as decreasing ECX until ECX is 0
NASM INSTR stosw					store word(from ax) to address pointed to edi and increase(if DF=0) edi or decrease (if DF=1) edi by one word
NASM INSTR rep stosw					store word(from ax) ECX number of times to address pointed to edi, while increasing (DF=0) or decreasing(DF=1) edi as well as decreasing ECX until ECX is 0
NASM INSTR movsw					store word(from address pointed to by ESI) to address pointed to EDI and increase(if DF=0) EDI or decrease (if DF=1) EDI by one word
NASM INSTR rep movsw					store word(from address pointed to by ESI) ECX number of times to address pointed to EDI, while increasing (DF=0) or decreasing(DF=1) EDI as well as decreasing ECX until ECX is 0
NASM INSTR stosd					store doubleword(from eax) to address pointed to edi and increase(if DF=0) edi or decrease (if DF=1) edi by one doubleword
NASM INSTR rep stosd					store doubleword(from eax) ECX number of times to address pointed to edi, while increasing (DF=0) or decreasing(DF=1) edi as well as decreasing ECX until ECX is 0
NASM INSTR movsd					store doubleword(from address pointed to by ESI) to address pointed to EDI and increase(if DF=0) EDI or decrease (if DF=1) EDI by one doubleword
NASM INSTR rep movsd					store doubleword(from address pointed to by ESI) ECX number of times to address pointed to EDI, while increasing (DF=0) or decreasing(DF=1) EDI as well as decreasing ECX until ECX is 0
NASM INSTR aaa						help adding in BCD arithmetic, clears out high nibble of al, basically stores decimal digits in 4bit nibbles, also using AF (auxiliary carry flag) to report carry overs
NASM INSTR jcxz						jump if ecx equal zero
NASM INSTR loopnz					decrement ecx, if not 0 loop back, also check the zero flag from previous instruction , if not zero loop back






MASM 
MASM DIRECT X dup(?)					duplicate ?(undefined) X time in memory
MASM DIRECT OPTION ...					sets assembler options (e.g.M510=assembler version 5.1)
MASM SYMBOLS @code					returns the name of the code segment
MASM SYMBOLS @CodeSize					returns an int representing the default code distance
MASM SYMBOLS @CurSeg					REturns the name of the current segment
MASM SYMBOLS @data					expands to DGROUP
MASM SYMBOLS @DataSize					default data distance
MASM SYMBOLS @fardata					name of the segment defined by .fardata dir
MASM SYMBOLS @fardata?					name of the segment defined by .fardata? dir
MASM SYMBOLS @Model					selected memory model
MASM SYMBOLS @stack					expands to DGROUP for near stacks or STACK for far stack
MASM SYMBOLS @WordSize					word size of the current segment
MASM SYMBOLS @Cpu					bit mask specifying the processor mode
MASM SYMBOLS @Environ					value of environment variables during assembly
MASM SYMBOLS @Interface					contains information about language params
MASM SYMBOLS @Version					masm version number (6.1=610)
MASM SYMBOLS @Date					current system date
MASM SYMBOLS @Time					current system time
MASM SYMBOLS @FileCur					current file (base+suffix)
MASM SYMBOLS @FileName					base name of current file
MASM SYMBOLS @Line					source line number in the current file
MASM SYMBOLS @CatStr					concatenation of two strings
MASM SYMBOLS @InStr					starting position of a string within another string
MASM SYMBOLS @SizeStr					length of a given string
MASM SYMBOLS @SubStr					substring from a given string
MASM DIRECT IF	expr					if expression is true=nonzero
MASM DIRECT IFE	expr					if expression is false=zero
MASM DIRECT IFDEF name					name has been defined previously
MASM DIRECT IFNDEF name					if name has not been defined previously
MASM DIRECT IFB arg					if argument is blank
MASM DIRECT IFNB arg					if argument is not blank
MASM DIRECT IFIDN(IFIDNI) arg1,arg2			if arg1 and arg2 are identical (with ignoring case)
MASM DIRECT IFDIF(IFDIF) arg1,arg2			if arg1 and arg2 are different (with ignoring case)
MASM DIRECT .ERR					assembly time error check
MASM DIRECT .ERRNDEF name				assembly time error if name is not defined
MASM DIRECT .MODEL model				program model (model=Tiny,Small,Medium,Compact,Large,Huge,Flat)
MASM DIRECT .MODEL options				model options(options=language (c...),stack distance(nearstack,farstack)
MASM DIRECT .STACK number				number can define the size of the stack
MASM DIRECT .DATA					start of the data segment (shorthand)
MASM DIRECT .CODE					start of the code segment (shorthand)
MASM DIRECT .STARTUP					generates the code to adjust segment registers based on model
MASM DIRECT .EXIT					generates the code to call msdos interrupt 21h with ah=04Ch (graceful exit with return value in al)
MASM DIRECT END name					at the end of the asm with name specifying entry point to code
MASM DIRECT .DATA?					uninitialized data
MASM DIRECT .FARDATA					far data segment
MASM DIRECT .FARDATA?					uninitialized far data segment
MASM DIRECT .CONST					const data segment
MASM DIRECT name SEGMENT				defines segment
MASM DIRECT name ENDS					defines end of segment definition
MASM DIRECT stack SEGMENT DWORD READONLY PRIVATE USE32 'STACK' defines stack segment aligned on 4byte(DWORD) boundary readonly private using 32bit segment offsets under class 'stack'
MASM DIRECT ASSUME seg-reg:segment			set the segment registers to segment (..flat,nothing,error)
MASM DIRECT GROUP seg,seg...				groups segment into group
MASM DIRECT ASSUME cs:_text,ds:DGROUP,ss:DGROUP		one of the possible segment registers setups (nearstack)
MASM INSTR OFFSET label					offset take the memory offset of variable/label from the 
MASM INSTR SEG label					segment of the variable
MASM INSTR WORD PTR[address]				word cast on memory address
MASM DIRECT name TYPEDEF PTR WORD			define type name to pointer to word
MASM DIRECT name TYPEDEF FAR PTR BYTE			define type name to far pointer to byte
MASM DIRECT EXTERN var:PTR DWORD			define external variable that is a pointer to doubleword
MASM INSTR les						load a segment into es
MASM INSTR lds						load a segment into ds
MASM INSTR CBW						convert byte to word (e.g. AL to AX)
MASM INSTR CWD						convert word to double (e.g ax to dx:ax)
MASM INSTR CWDE						convert word to double extended (e.g ax to eax)
MASM INSTR CDQ						convert double to qword (e.g. eax to edx:eax)
MASM INSTR ADC						add with carry
MASM INSTR SBB						subtract with borrow
MASM INSTR imul reg16,immed				multiplies reg16 with reg16*immed
MASM INSTR imul reg16,reg16/mem16,immed			multiplies reg16/mem16 * immed and stores in reg16
MASM INSTR imul reg,reg/mem				multiply reg*reg/mem and store in reg
MASM DIRECT LENGTHOF					length in number of elements
MASM DIRECT SIZEOF					size in bytes
MASM DIRECT TYPE					size in bytes for one element
MASM INSTR MOVS(B,W,D,Q)				moves bytes(words,doubles,quads) from esi to edi. after each move, moves fwd by one byte(w,d,q)
MASM INSTR STOS(B,W,D,Q)				stores bytes(words,doubles,quads) in EDI. the bytes is taken from al(ax,eax,rax), moves fwd by one byte(w,d,q)
MASM INSTR SCAS(B,W,D,Q)				scans the bytes(w,d,q) in edi and checks if its equal to byte(w,d,q) in al(ax,eax,rax), used with repeat until
MASM INSTR CMPS(B,W,D,Q)				compares bytes(words,doubles,quads) in esi with edi and moves on by one element in both, used with repeat until
MASM INSTR LODS(B,W,D,Q)				loads values from destination index to a(ax,eax,rax). not used with repeat
MASM INSTR REP,REPNE,REPE				repeat prefix for string instructions REP-repeat, REPE-repeat while equal, REPNE-repeat while not equal
MASM INSTR XLAT						translate an index stored in al to table stored in bx and lookup the value and store in al al=bx[al]
MASM DIRECT name STRUCT align...name ENDS		declare template for structure name with alignement=align(default 1)
MASM DIRECT name UNION....name ENDS			declare a template for union 
MASM DIRECT var STRUCTname <init1,ini2>			initializing variable of type structure
MASM DIRECT var STRUCTname {{ini1,ini2..},{ini1,ini2..}}initializing an array of structures of type STRUCTname
MASM DIRECT name RECORD bitfield1:nrbits1,bitfield2:nrbits2...defining a type RECORD, cosnisting of fields defined by number of bits
MASM DIRECT name RECORDtype <ini1,ini2...>		initializing variable name of type recordtype with values ini1...
MASM DIRECT WIDTH recordfield				gives the number of bytes of the field from record type
MASM DIRECT NOT MASK recordfield			negative mask for recordfield to be used with and to zero out the whole field in another operator,keeping the rest intact
MASM DIRECT MASK recordfield				positive mask on recordfield to be used with or to turn all bits of the record field to 1 in another operator
MASM INSTR FLD mem					load number from mem to top of the coproc register stack (ST)
MASM INSTR FST mem					stores number from top of coproc register stack to mem
MASM INSTR FSTP mem					stores number from top of coproc register stack to mem and pops it from the stack
MASM INSTR FILD mem					load binary integer to stack
MASM INSTR FIST mem					store binary integer from stack to mem
MASM INSTR FISTP mem					store bin int from stack to mem and pop it from stack
MASM INSTR FBLD	mem					load BCD from mem to stack
MASM INSTR FBSTP mem					store BCD in memory from stack and pop the stack
MASM INSTR FXCH reg1,reg2				exchange register values
MASM INSTR FLDZ						load (push) 0 to ST
MASM INSTR FLD1						load (push) 1 to ST
MASM INSTR FLDCW mem2byte				loads the control word to coprocessor
MASM INSTR FSTCW(FNSTCW)				stores control word in memory, N=no wait
MASM INSTR FLDENV mem14byte				loads environment from memory
MASM INSTR FSTENV mem14byte				stores environment in memory
MASM INSTR FRSTOR mem94byte				restores state from memory
MASM INSTR FSAVE mem94byte				save state of coproc in memory
MASM INSTR FLDL2E					pushes the value of log(2e) into ST
MASM INSTR FLDL2T					pushes the value of log(210) into ST
MASM INSTR FLDLG2					pushes log(10)2 into ST
MASM INSTR FLDLN2					pushes log(e2) to ST
MASM INSTR FSUB						subtracts dource from destination (source=ST(1),dest=ST)
MASM INSTR FSUBR					subtracts destination from source (source=ST1,dest=ST)
MASM INSTR FMUL						multiplies the source and destination
MASM INSTR FDIV						divides destination by source
MASM INSTR FDIVR					divides the source by destination
MASM INSTR FABS						sets the sign of ST to positive
MASM INSTR FCHS						revesres the sign of ST
MASM INSTR FRNDINT					rounds ST to integer
MASM INSTR FSQRT					replaces ST with its square root
MASM INSTR FSCALE					multiplies the stack top value by 2 to power of ST1
MASM INSTR FPREM					calculates the remainedr of ST/ST1
MASM INSTR FSIN						calculates the sin of ST
MASM INSTR FCOS						calcultaes the cos of ST
MASM INSTR FSINCOS					calculates the sin and cos of ST
MASM INSTR FPREM1					calc partial remainder by modulo on top 2 stack registers
MASM INSTR FXTRACT					breaks a number down into exponent and mantissa and pushes the mantissa on top of stack
MASM INSTR F2XM						calc 2toX-1
MASM INSTR FYL2X					calcs Y*logto2X
MASM INSTR FYL2XP1					calcs Y*logto2(x+1)
MASM INSTR FPTAN					calcs TAN value of ST
MASM INSTR FPATAN					calcs arctan of y/x
MASM INSTR FINIT(FNINIT)				resets the coproc and restores all default conditions in control and status word
MASM INSTR FCLEX(FNCLEX)				clears all exception flags and the busy flag of status word
MASM INSTR FINCSTP					adds 1 to stack pointer in status word
MASM INSTR FDECSTP					subtracts 1 from stack pointer in status word
MASM INSTR FFREE					marks the specified register as empty
MASM INSTR FTST						test for zero C0=CF,C1='',C2=PF,C3=ZF (ST>0 c0,c2,c3=0) (ST<0 c0=1) (ST=0 c3=1) (non comarable (c0,c2,c3=1)
MASM INSTR SAHF						store AH into flags register
MASM INSTR FSTSW(FNSTSW) mem2byte			store AX into flags register
MASM INSTR FCOM						compares ST with source (ST>source (c3=0,c2=0,c0=0) (ST<source C0=1) (ST=source c3=1) not comparabe (c0,c2,c3=1)
MASM INSTR FCOMP					compares like FCOM but pops the stack after
MASM INSTR FXAM						sets the value of control flags based on the type of the number in ST
MASM INSTR FNOP						no op=copies the top of stack to itself
MASM INSTR FDISI(FNDSI)					disables interrupts
MASM INSTR FENI(FNENI)					enables interrupts
MASM INSTR FSETPM					sets protected mode
MASM INSTR FSAVED(FNSAVED) -W(word)			saving the coprocessor state
MASM INSTR FRSTORD -W(word)				restoring the coprocessor state
MASM INSTR AAA						adjusts after addition to BCD
MASM INSTR AAS						adjust after subtraction to BCD
MASM INSTR AAM						adjust after multiplication (only MUL)
MASM INSTR AAD						adjust BEFORE division, use AAM after the operation to switch back to BCD
MASM INSTR DAA						packed bcd after addition adjustment
MASM INSTR DAS						packed BCD after subtraction adjustment
MASM INSTR JC/JB/JNAE					CF is set (jump if bellow) unsigned
MASM INSTR JNC/JNB/JAE					CF not set (jump if not bellow)
MASM INSTR JBE/JNA					CF or ZF is set (jump if bellow or equal)
MASM INSTR JA/JNBE					CF and ZF not set (jump if above)
MASM INSTR JE/JZ					ZF set (jump if equal)
MASM INSTR JNE/JNZ					ZF not set (jump if not equal)
MASM INSTR JL/JNGE					SF not eq OF (jump if less)
MASM INSTR JGE/JNL					SF = OF (jump if greater or equal)
MASM INSTR JLE/JNG					ZF set or SF !=OF (jump if less or equal)
MASM INSTR JG/JNLE					ZF not set and SF=OF
MASM INSTR JS						SF set (jump if result is negative)
MASM INSTR JNS						SF not set (result positive)
MASM INSTR JO						OF set
MASM INSTR JNO						OF not set
MASM INSTR JP/JPE					PF set (even parity)
MASM INSTR JNP/JPO					PF not set (odd parity)
MASM INSTR JCXZ/JECXZ					CX/ECX is zero
MASM INSTR BT X						copies xth bit to carry flag CF
MASM DIRECT .IF .ELSEIF .ELSE .ENDIF			conditional directives
MASM DIRECT LOOP label					checks CX=0 if not jumps to label
MASM DIRECT LOOPE/LOOPZ label				checks both cx and zf (if any of them is 0= ZF=1) jumps back to label
MASM DIRECT LOOPNE/LOOPNZ label				checks CX=0 or ZF=0 the jumps to label
MASM DIRECT .WHILE .ENDW				while loop
MASM DIRECT .REPEAT .UNTIL				repeat until loop
MASM DIRECT .REPEAT .UNTILCXZ				repeat until cx=0
MASM DIRECT .BREAK					break out of the loop
MASM DIRECT .CONTINUE					continue the next loop iteration
MASM DIRECT label PROC FAR C PUBLIC USES reg var1:WORD  procedure definition
MASM DIRECT label ENDP					end of procedure
MASM DIRECT PROC var3:VARARG				variable number of arguments, var3 is a pointer to remaining vars
MASM DIRECT LOCAL var1					using local variables, masm does the stack offset addresing
MASM DIRECT label PROTO NEAR C arg1:WORD..		defining procedure prototype
MASM DIRECT INVOKE					invokes a procedure and pushes arguments on the stack (call doesnt do push), also cleans the stack after return\
MASM INSTR ret X					return with X parameter, cleans X bytes from the stack after return
MASM INSTR INT x					pushes flags,code segment register,IP register and jumps to interrupt vector function
MASM INSTR IRET						returns from interrupt vector function, pops registers back and jumps to restored IP
MASM INSTR INTO						interrupt on overflow

	 





				









SYSTEMCALLS NASM SYS_WRITE eax=4,ebx=fd,ecx=char*,edx=nr_char (INT 080h)	system write =write to standard output
SYSTEMCALLS NASM SYS_READ eax=3,ebx=fd,ecx=char*,edx=nr_chars (INT 080h)	system read=read from standard input(fd)
SYSTEMCALL NASM EXIT eax=1,ebx=return_val (INT 080h)				exit system call

